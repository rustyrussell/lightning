#![allow(non_camel_case_types)]
//! This file was automatically generated using the following command:
//!
//! ```bash
//! contrib/msggen/msggen/__main__.py
//! ```
//!
//! Do not edit this file, it'll be overwritten. Rather edit the schema that
//! this file was generated from

use serde::{Deserialize, Serialize};
pub use requests::*;
pub use responses::*;

#[derive(Clone, Debug, Serialize, Deserialize)]
#[serde(tag = "method", content = "params")]
#[serde(rename_all = "lowercase")]
pub enum Request {
	Getinfo(requests::GetinfoRequest),
	ListPeers(requests::ListpeersRequest),
	ListFunds(requests::ListfundsRequest),
	SendPay(requests::SendpayRequest),
	ListChannels(requests::ListchannelsRequest),
	AddGossip(requests::AddgossipRequest),
	AutoCleanInvoice(requests::AutocleaninvoiceRequest),
	CheckMessage(requests::CheckmessageRequest),
	Close(requests::CloseRequest),
	ConnectPeer(requests::ConnectRequest),
	CreateInvoice(requests::CreateinvoiceRequest),
	Datastore(requests::DatastoreRequest),
	CreateOnion(requests::CreateonionRequest),
	DelDatastore(requests::DeldatastoreRequest),
	DelExpiredInvoice(requests::DelexpiredinvoiceRequest),
	DelInvoice(requests::DelinvoiceRequest),
	Invoice(requests::InvoiceRequest),
	ListDatastore(requests::ListdatastoreRequest),
	ListInvoices(requests::ListinvoicesRequest),
	SendOnion(requests::SendonionRequest),
	ListSendPays(requests::ListsendpaysRequest),
	ListTransactions(requests::ListtransactionsRequest),
	Pay(requests::PayRequest),
	ListNodes(requests::ListnodesRequest),
	WaitAnyInvoice(requests::WaitanyinvoiceRequest),
	WaitInvoice(requests::WaitinvoiceRequest),
	WaitSendPay(requests::WaitsendpayRequest),
	NewAddr(requests::NewaddrRequest),
	Withdraw(requests::WithdrawRequest),
}

#[derive(Clone, Debug, Serialize, Deserialize)]
#[serde(tag = "method", content = "result")]
#[serde(rename_all = "lowercase")]
pub enum Response {
	Getinfo(responses::GetinfoResponse),
	ListPeers(responses::ListpeersResponse),
	ListFunds(responses::ListfundsResponse),
	SendPay(responses::SendpayResponse),
	ListChannels(responses::ListchannelsResponse),
	AddGossip(responses::AddgossipResponse),
	AutoCleanInvoice(responses::AutocleaninvoiceResponse),
	CheckMessage(responses::CheckmessageResponse),
	Close(responses::CloseResponse),
	ConnectPeer(responses::ConnectResponse),
	CreateInvoice(responses::CreateinvoiceResponse),
	Datastore(responses::DatastoreResponse),
	CreateOnion(responses::CreateonionResponse),
	DelDatastore(responses::DeldatastoreResponse),
	DelExpiredInvoice(responses::DelexpiredinvoiceResponse),
	DelInvoice(responses::DelinvoiceResponse),
	Invoice(responses::InvoiceResponse),
	ListDatastore(responses::ListdatastoreResponse),
	ListInvoices(responses::ListinvoicesResponse),
	SendOnion(responses::SendonionResponse),
	ListSendPays(responses::ListsendpaysResponse),
	ListTransactions(responses::ListtransactionsResponse),
	Pay(responses::PayResponse),
	ListNodes(responses::ListnodesResponse),
	WaitAnyInvoice(responses::WaitanyinvoiceResponse),
	WaitInvoice(responses::WaitinvoiceResponse),
	WaitSendPay(responses::WaitsendpayResponse),
	NewAddr(responses::NewaddrResponse),
	Withdraw(responses::WithdrawResponse),
}

pub mod requests {
    #[allow(unused_imports)]
    use crate::primitives::*;
    #[allow(unused_imports)]
    use serde::{{Deserialize, Serialize}};

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct GetinfoRequest {
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct ListpeersRequest {
	    #[serde(alias = "id", skip_serializing_if = "Option::is_none")]
	    pub id: Option<String>,
	    #[serde(alias = "level", skip_serializing_if = "Option::is_none")]
	    pub level: Option<String>,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct ListfundsRequest {
	    #[serde(alias = "spent", skip_serializing_if = "Option::is_none")]
	    pub spent: Option<bool>,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct SendpayRoute {
	    #[serde(alias = "msatoshi")]
	    pub msatoshi: Amount,
	    #[serde(alias = "id")]
	    pub id: String,
	    #[serde(alias = "delay")]
	    pub delay: u16,
	    #[serde(alias = "channel")]
	    pub channel: String,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct SendpayRequest {
	    #[serde(alias = "route")]
	    pub route: Vec<SendpayRoute>,
	    #[serde(alias = "payment_hash")]
	    pub payment_hash: String,
	    #[serde(alias = "label", skip_serializing_if = "Option::is_none")]
	    pub label: Option<String>,
	    #[serde(alias = "msatoshi", skip_serializing_if = "Option::is_none")]
	    pub msatoshi: Option<Amount>,
	    #[serde(alias = "bolt11", skip_serializing_if = "Option::is_none")]
	    pub bolt11: Option<String>,
	    #[serde(alias = "payment_secret", skip_serializing_if = "Option::is_none")]
	    pub payment_secret: Option<String>,
	    #[serde(alias = "partid", skip_serializing_if = "Option::is_none")]
	    pub partid: Option<u16>,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct ListchannelsRequest {
	    #[serde(alias = "short_channel_id", skip_serializing_if = "Option::is_none")]
	    pub short_channel_id: Option<String>,
	    #[serde(alias = "source", skip_serializing_if = "Option::is_none")]
	    pub source: Option<String>,
	    #[serde(alias = "destination", skip_serializing_if = "Option::is_none")]
	    pub destination: Option<String>,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct AddgossipRequest {
	    #[serde(alias = "message")]
	    pub message: String,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct AutocleaninvoiceRequest {
	    #[serde(alias = "expired_by", skip_serializing_if = "Option::is_none")]
	    pub expired_by: Option<u64>,
	    #[serde(alias = "cycle_seconds", skip_serializing_if = "Option::is_none")]
	    pub cycle_seconds: Option<u64>,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct CheckmessageRequest {
	    #[serde(alias = "message")]
	    pub message: String,
	    #[serde(alias = "zbase")]
	    pub zbase: String,
	    #[serde(alias = "pubkey", skip_serializing_if = "Option::is_none")]
	    pub pubkey: Option<String>,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct CloseRequest {
	    #[serde(alias = "id")]
	    pub id: String,
	    #[serde(alias = "unilateraltimeout", skip_serializing_if = "Option::is_none")]
	    pub unilateraltimeout: Option<u32>,
	    #[serde(alias = "destination", skip_serializing_if = "Option::is_none")]
	    pub destination: Option<String>,
	    #[serde(alias = "fee_negotiation_step", skip_serializing_if = "Option::is_none")]
	    pub fee_negotiation_step: Option<String>,
	    #[serde(alias = "wrong_funding", skip_serializing_if = "Option::is_none")]
	    pub wrong_funding: Option<String>,
	    #[serde(alias = "force_lease_closed", skip_serializing_if = "Option::is_none")]
	    pub force_lease_closed: Option<bool>,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct ConnectRequest {
	    #[serde(alias = "id")]
	    pub id: String,
	    #[serde(alias = "host", skip_serializing_if = "Option::is_none")]
	    pub host: Option<String>,
	    #[serde(alias = "port", skip_serializing_if = "Option::is_none")]
	    pub port: Option<u16>,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct CreateinvoiceRequest {
	    #[serde(alias = "invstring")]
	    pub invstring: String,
	    #[serde(alias = "label")]
	    pub label: String,
	    #[serde(alias = "preimage")]
	    pub preimage: String,
	}

	#[derive(Copy, Clone, Debug, Deserialize, Serialize)]
	#[serde(rename_all = "lowercase")]
	pub enum DatastoreMode {
	    MUST_CREATE,
	    MUST_REPLACE,
	    CREATE_OR_REPLACE,
	    MUST_APPEND,
	    CREATE_OR_APPEND,
	}

	impl TryFrom<i32> for DatastoreMode {
	    type Error = anyhow::Error;
	    fn try_from(c: i32) -> Result<DatastoreMode, anyhow::Error> {
	        match c {
	    0 => Ok(DatastoreMode::MUST_CREATE),
	    1 => Ok(DatastoreMode::MUST_REPLACE),
	    2 => Ok(DatastoreMode::CREATE_OR_REPLACE),
	    3 => Ok(DatastoreMode::MUST_APPEND),
	    4 => Ok(DatastoreMode::CREATE_OR_APPEND),
	            o => Err(anyhow::anyhow!("Unknown variant {} for enum DatastoreMode", o)),
	        }
	    }
	}
	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct DatastoreRequest {
	    #[serde(alias = "key")]
	    pub key: Vec<String>,
	    #[serde(alias = "hex", skip_serializing_if = "Option::is_none")]
	    pub hex: Option<String>,
	    pub mode: Option<DatastoreMode>,
	    #[serde(alias = "generation", skip_serializing_if = "Option::is_none")]
	    pub generation: Option<u64>,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct CreateonionHops {
	    #[serde(alias = "pubkey")]
	    pub pubkey: String,
	    #[serde(alias = "payload")]
	    pub payload: String,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct CreateonionRequest {
	    #[serde(alias = "hops")]
	    pub hops: Vec<CreateonionHops>,
	    #[serde(alias = "assocdata")]
	    pub assocdata: String,
	    #[serde(alias = "session_key", skip_serializing_if = "Option::is_none")]
	    pub session_key: Option<String>,
	    #[serde(alias = "onion_size", skip_serializing_if = "Option::is_none")]
	    pub onion_size: Option<u16>,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct DeldatastoreRequest {
	    #[serde(alias = "key")]
	    pub key: Vec<String>,
	    #[serde(alias = "generation", skip_serializing_if = "Option::is_none")]
	    pub generation: Option<u64>,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct DelexpiredinvoiceRequest {
	    #[serde(alias = "maxexpirytime")]
	    pub maxexpirytime: u32,
	}

	#[derive(Copy, Clone, Debug, Deserialize, Serialize)]
	#[serde(rename_all = "lowercase")]
	pub enum DelinvoiceStatus {
	    PAID,
	    EXPIRED,
	    UNPAID,
	}

	impl TryFrom<i32> for DelinvoiceStatus {
	    type Error = anyhow::Error;
	    fn try_from(c: i32) -> Result<DelinvoiceStatus, anyhow::Error> {
	        match c {
	    0 => Ok(DelinvoiceStatus::PAID),
	    1 => Ok(DelinvoiceStatus::EXPIRED),
	    2 => Ok(DelinvoiceStatus::UNPAID),
	            o => Err(anyhow::anyhow!("Unknown variant {} for enum DelinvoiceStatus", o)),
	        }
	    }
	}
	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct DelinvoiceRequest {
	    #[serde(alias = "label")]
	    pub label: String,
	    // Path `DelInvoice.status`
	    #[serde(rename = "status")]
	    pub status: DelinvoiceStatus,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct InvoiceRequest {
	    #[serde(alias = "msatoshi")]
	    pub msatoshi: Amount,
	    #[serde(alias = "description")]
	    pub description: String,
	    #[serde(alias = "label")]
	    pub label: String,
	    #[serde(alias = "fallbacks")]
	    pub fallbacks: Vec<String>,
	    #[serde(alias = "preimage", skip_serializing_if = "Option::is_none")]
	    pub preimage: Option<String>,
	    #[serde(alias = "cltv", skip_serializing_if = "Option::is_none")]
	    pub cltv: Option<u32>,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct ListdatastoreRequest {
	    #[serde(alias = "key")]
	    pub key: Vec<String>,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct ListinvoicesRequest {
	    #[serde(alias = "label", skip_serializing_if = "Option::is_none")]
	    pub label: Option<String>,
	    #[serde(alias = "invstring", skip_serializing_if = "Option::is_none")]
	    pub invstring: Option<String>,
	    #[serde(alias = "payment_hash", skip_serializing_if = "Option::is_none")]
	    pub payment_hash: Option<String>,
	    #[serde(alias = "offer_id", skip_serializing_if = "Option::is_none")]
	    pub offer_id: Option<String>,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct SendonionFirst_hop {
	    #[serde(alias = "id")]
	    pub id: String,
	    #[serde(alias = "amount_msat")]
	    pub amount_msat: Amount,
	    #[serde(alias = "delay")]
	    pub delay: u16,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct SendonionRequest {
	    #[serde(alias = "onion")]
	    pub onion: String,
	}

	#[derive(Copy, Clone, Debug, Deserialize, Serialize)]
	#[serde(rename_all = "lowercase")]
	pub enum ListsendpaysStatus {
	    PENDING,
	    COMPLETE,
	    FAILED,
	}

	impl TryFrom<i32> for ListsendpaysStatus {
	    type Error = anyhow::Error;
	    fn try_from(c: i32) -> Result<ListsendpaysStatus, anyhow::Error> {
	        match c {
	    0 => Ok(ListsendpaysStatus::PENDING),
	    1 => Ok(ListsendpaysStatus::COMPLETE),
	    2 => Ok(ListsendpaysStatus::FAILED),
	            o => Err(anyhow::anyhow!("Unknown variant {} for enum ListsendpaysStatus", o)),
	        }
	    }
	}
	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct ListsendpaysRequest {
	    #[serde(alias = "bolt11", skip_serializing_if = "Option::is_none")]
	    pub bolt11: Option<String>,
	    #[serde(alias = "payment_hash", skip_serializing_if = "Option::is_none")]
	    pub payment_hash: Option<String>,
	    pub status: Option<ListsendpaysStatus>,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct ListtransactionsRequest {
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct PayRequest {
	    #[serde(alias = "bolt11")]
	    pub bolt11: String,
	    #[serde(alias = "msatoshi", skip_serializing_if = "Option::is_none")]
	    pub msatoshi: Option<Amount>,
	    #[serde(alias = "label", skip_serializing_if = "Option::is_none")]
	    pub label: Option<String>,
	    #[serde(alias = "riskfactor", skip_serializing_if = "Option::is_none")]
	    pub riskfactor: Option<f32>,
	    #[serde(alias = "maxfeepercent", skip_serializing_if = "Option::is_none")]
	    pub maxfeepercent: Option<f32>,
	    #[serde(alias = "retry_for", skip_serializing_if = "Option::is_none")]
	    pub retry_for: Option<u16>,
	    #[serde(alias = "maxdelay", skip_serializing_if = "Option::is_none")]
	    pub maxdelay: Option<u16>,
	    #[serde(alias = "exemptfee", skip_serializing_if = "Option::is_none")]
	    pub exemptfee: Option<f32>,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct ListnodesRequest {
	    #[serde(alias = "id", skip_serializing_if = "Option::is_none")]
	    pub id: Option<String>,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct WaitanyinvoiceRequest {
	    #[serde(alias = "lastpay_index", skip_serializing_if = "Option::is_none")]
	    pub lastpay_index: Option<i64>,
	    #[serde(alias = "timeout", skip_serializing_if = "Option::is_none")]
	    pub timeout: Option<i64>,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct WaitinvoiceRequest {
	    #[serde(alias = "label")]
	    pub label: String,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct WaitsendpayRequest {
	    #[serde(alias = "payment_hash")]
	    pub payment_hash: String,
	    #[serde(alias = "partid", skip_serializing_if = "Option::is_none")]
	    pub partid: Option<u16>,
	    #[serde(alias = "timeout", skip_serializing_if = "Option::is_none")]
	    pub timeout: Option<u32>,
	}

	#[derive(Copy, Clone, Debug, Deserialize, Serialize)]
	#[serde(rename_all = "lowercase")]
	pub enum NewaddrAddresstype {
	    BECH32,
	    P2SH_SEGWIT,
	}

	impl TryFrom<i32> for NewaddrAddresstype {
	    type Error = anyhow::Error;
	    fn try_from(c: i32) -> Result<NewaddrAddresstype, anyhow::Error> {
	        match c {
	    0 => Ok(NewaddrAddresstype::BECH32),
	    1 => Ok(NewaddrAddresstype::P2SH_SEGWIT),
	            o => Err(anyhow::anyhow!("Unknown variant {} for enum NewaddrAddresstype", o)),
	        }
	    }
	}
	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct NewaddrRequest {
	    pub addresstype: Option<NewaddrAddresstype>,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct WithdrawRequest {
	    #[serde(alias = "destination")]
	    pub destination: String,
	    #[serde(alias = "satoshi", skip_serializing_if = "Option::is_none")]
	    pub satoshi: Option<Amount>,
	    #[serde(alias = "minconf", skip_serializing_if = "Option::is_none")]
	    pub minconf: Option<u16>,
	    #[serde(alias = "utxos")]
	    pub utxos: Vec<Utxo>,
	}

}


pub mod responses {
    #[allow(unused_imports)]
    use crate::primitives::*;
    #[allow(unused_imports)]
    use serde::{{Deserialize, Serialize}};

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct GetinfoOur_features {
	    #[serde(alias = "init")]
	    pub init: String,
	    #[serde(alias = "node")]
	    pub node: String,
	    #[serde(alias = "channel")]
	    pub channel: String,
	    #[serde(alias = "invoice")]
	    pub invoice: String,
	}

	/// Type of connection
	#[derive(Copy, Clone, Debug, Deserialize, Serialize)]
	#[serde(rename_all = "lowercase")]
	pub enum GetinfoAddressType {
	    DNS,
	    IPV4,
	    IPV6,
	    TORV2,
	    TORV3,
	    WEBSOCKET,
	}

	impl TryFrom<i32> for GetinfoAddressType {
	    type Error = anyhow::Error;
	    fn try_from(c: i32) -> Result<GetinfoAddressType, anyhow::Error> {
	        match c {
	    0 => Ok(GetinfoAddressType::DNS),
	    1 => Ok(GetinfoAddressType::IPV4),
	    2 => Ok(GetinfoAddressType::IPV6),
	    3 => Ok(GetinfoAddressType::TORV2),
	    4 => Ok(GetinfoAddressType::TORV3),
	    5 => Ok(GetinfoAddressType::WEBSOCKET),
	            o => Err(anyhow::anyhow!("Unknown variant {} for enum GetinfoAddressType", o)),
	        }
	    }
	}
	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct GetinfoAddress {
	    // Path `Getinfo.address[].type`
	    #[serde(rename = "type")]
	    pub item_type: GetinfoAddressType,
	    #[serde(alias = "port")]
	    pub port: u16,
	    #[serde(alias = "address", skip_serializing_if = "Option::is_none")]
	    pub address: Option<String>,
	}

	/// Type of connection
	#[derive(Copy, Clone, Debug, Deserialize, Serialize)]
	#[serde(rename_all = "lowercase")]
	pub enum GetinfoBindingType {
	    LOCAL_SOCKET,
	    IPV4,
	    IPV6,
	    TORV2,
	    TORV3,
	}

	impl TryFrom<i32> for GetinfoBindingType {
	    type Error = anyhow::Error;
	    fn try_from(c: i32) -> Result<GetinfoBindingType, anyhow::Error> {
	        match c {
	    0 => Ok(GetinfoBindingType::LOCAL_SOCKET),
	    1 => Ok(GetinfoBindingType::IPV4),
	    2 => Ok(GetinfoBindingType::IPV6),
	    3 => Ok(GetinfoBindingType::TORV2),
	    4 => Ok(GetinfoBindingType::TORV3),
	            o => Err(anyhow::anyhow!("Unknown variant {} for enum GetinfoBindingType", o)),
	        }
	    }
	}
	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct GetinfoBinding {
	    // Path `Getinfo.binding[].type`
	    #[serde(rename = "type")]
	    pub item_type: GetinfoBindingType,
	    #[serde(alias = "address", skip_serializing_if = "Option::is_none")]
	    pub address: Option<String>,
	    #[serde(alias = "port", skip_serializing_if = "Option::is_none")]
	    pub port: Option<u16>,
	    #[serde(alias = "socket", skip_serializing_if = "Option::is_none")]
	    pub socket: Option<String>,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct GetinfoResponse {
	    #[serde(alias = "id")]
	    pub id: String,
	    #[serde(alias = "alias")]
	    pub alias: String,
	    #[serde(alias = "color")]
	    pub color: String,
	    #[serde(alias = "num_peers")]
	    pub num_peers: u32,
	    #[serde(alias = "num_pending_channels")]
	    pub num_pending_channels: u32,
	    #[serde(alias = "num_active_channels")]
	    pub num_active_channels: u32,
	    #[serde(alias = "num_inactive_channels")]
	    pub num_inactive_channels: u32,
	    #[serde(alias = "version")]
	    pub version: String,
	    #[serde(alias = "lightning-dir")]
	    pub lightning_dir: String,
	    #[serde(alias = "blockheight")]
	    pub blockheight: u32,
	    #[serde(alias = "network")]
	    pub network: String,
	    #[serde(alias = "fees_collected_msat")]
	    pub fees_collected_msat: Amount,
	    #[serde(alias = "address")]
	    pub address: Vec<GetinfoAddress>,
	    #[serde(alias = "binding")]
	    pub binding: Vec<GetinfoBinding>,
	    #[serde(alias = "warning_bitcoind_sync", skip_serializing_if = "Option::is_none")]
	    pub warning_bitcoind_sync: Option<String>,
	    #[serde(alias = "warning_lightningd_sync", skip_serializing_if = "Option::is_none")]
	    pub warning_lightningd_sync: Option<String>,
	}

	#[derive(Copy, Clone, Debug, Deserialize, Serialize)]
	#[serde(rename_all = "lowercase")]
	pub enum ListpeersPeersLogType {
	    SKIPPED,
	    BROKEN,
	    UNUSUAL,
	    INFO,
	    DEBUG,
	    IO_IN,
	    IO_OUT,
	}

	impl TryFrom<i32> for ListpeersPeersLogType {
	    type Error = anyhow::Error;
	    fn try_from(c: i32) -> Result<ListpeersPeersLogType, anyhow::Error> {
	        match c {
	    0 => Ok(ListpeersPeersLogType::SKIPPED),
	    1 => Ok(ListpeersPeersLogType::BROKEN),
	    2 => Ok(ListpeersPeersLogType::UNUSUAL),
	    3 => Ok(ListpeersPeersLogType::INFO),
	    4 => Ok(ListpeersPeersLogType::DEBUG),
	    5 => Ok(ListpeersPeersLogType::IO_IN),
	    6 => Ok(ListpeersPeersLogType::IO_OUT),
	            o => Err(anyhow::anyhow!("Unknown variant {} for enum ListpeersPeersLogType", o)),
	        }
	    }
	}
	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct ListpeersPeersLog {
	    // Path `ListPeers.peers[].log[].type`
	    #[serde(rename = "type")]
	    pub item_type: ListpeersPeersLogType,
	    #[serde(alias = "num_skipped", skip_serializing_if = "Option::is_none")]
	    pub num_skipped: Option<u32>,
	    #[serde(alias = "time", skip_serializing_if = "Option::is_none")]
	    pub time: Option<String>,
	    #[serde(alias = "source", skip_serializing_if = "Option::is_none")]
	    pub source: Option<String>,
	    #[serde(alias = "log", skip_serializing_if = "Option::is_none")]
	    pub log: Option<String>,
	    #[serde(alias = "node_id", skip_serializing_if = "Option::is_none")]
	    pub node_id: Option<String>,
	    #[serde(alias = "data", skip_serializing_if = "Option::is_none")]
	    pub data: Option<String>,
	}

	/// the channel state, in particular "CHANNELD_NORMAL" means the channel can be used normally
	#[derive(Copy, Clone, Debug, Deserialize, Serialize)]
	#[serde(rename_all = "lowercase")]
	pub enum ListpeersPeersChannelsState {
	    OPENINGD,
	    CHANNELD_AWAITING_LOCKIN,
	    CHANNELD_NORMAL,
	    CHANNELD_SHUTTING_DOWN,
	    CLOSINGD_SIGEXCHANGE,
	    CLOSINGD_COMPLETE,
	    AWAITING_UNILATERAL,
	    FUNDING_SPEND_SEEN,
	    ONCHAIN,
	    DUALOPEND_OPEN_INIT,
	    DUALOPEND_AWAITING_LOCKIN,
	}

	impl TryFrom<i32> for ListpeersPeersChannelsState {
	    type Error = anyhow::Error;
	    fn try_from(c: i32) -> Result<ListpeersPeersChannelsState, anyhow::Error> {
	        match c {
	    0 => Ok(ListpeersPeersChannelsState::OPENINGD),
	    1 => Ok(ListpeersPeersChannelsState::CHANNELD_AWAITING_LOCKIN),
	    2 => Ok(ListpeersPeersChannelsState::CHANNELD_NORMAL),
	    3 => Ok(ListpeersPeersChannelsState::CHANNELD_SHUTTING_DOWN),
	    4 => Ok(ListpeersPeersChannelsState::CLOSINGD_SIGEXCHANGE),
	    5 => Ok(ListpeersPeersChannelsState::CLOSINGD_COMPLETE),
	    6 => Ok(ListpeersPeersChannelsState::AWAITING_UNILATERAL),
	    7 => Ok(ListpeersPeersChannelsState::FUNDING_SPEND_SEEN),
	    8 => Ok(ListpeersPeersChannelsState::ONCHAIN),
	    9 => Ok(ListpeersPeersChannelsState::DUALOPEND_OPEN_INIT),
	    10 => Ok(ListpeersPeersChannelsState::DUALOPEND_AWAITING_LOCKIN),
	            o => Err(anyhow::anyhow!("Unknown variant {} for enum ListpeersPeersChannelsState", o)),
	        }
	    }
	}
	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct ListpeersPeersChannelsFeerate {
	    #[serde(alias = "perkw")]
	    pub perkw: u32,
	    #[serde(alias = "perkb")]
	    pub perkb: u32,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct ListpeersPeersChannelsInflight {
	    #[serde(alias = "funding_txid")]
	    pub funding_txid: String,
	    #[serde(alias = "funding_outnum")]
	    pub funding_outnum: u32,
	    #[serde(alias = "feerate")]
	    pub feerate: String,
	    #[serde(alias = "total_funding_msat")]
	    pub total_funding_msat: Amount,
	    #[serde(alias = "our_funding_msat")]
	    pub our_funding_msat: Amount,
	    #[serde(alias = "scratch_txid")]
	    pub scratch_txid: String,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct ListpeersPeersChannelsFunding {
	    #[serde(alias = "local_msat")]
	    pub local_msat: Amount,
	    #[serde(alias = "remote_msat")]
	    pub remote_msat: Amount,
	    #[serde(alias = "pushed_msat")]
	    pub pushed_msat: Amount,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct ListpeersPeersChannelsState_changes {
	    #[serde(alias = "timestamp")]
	    pub timestamp: String,
	    // Path `ListPeers.peers[].channels[].state_changes[].old_state`
	    #[serde(rename = "old_state")]
	    pub old_state: ChannelState,
	    // Path `ListPeers.peers[].channels[].state_changes[].new_state`
	    #[serde(rename = "new_state")]
	    pub new_state: ChannelState,
	    // Path `ListPeers.peers[].channels[].state_changes[].cause`
	    #[serde(rename = "cause")]
	    pub cause: ChannelStateChangeCause,
	    #[serde(alias = "message")]
	    pub message: String,
	}

	/// Whether it came from peer, or is going to peer
	#[derive(Copy, Clone, Debug, Deserialize, Serialize)]
	#[serde(rename_all = "lowercase")]
	pub enum ListpeersPeersChannelsHtlcsDirection {
	    IN,
	    OUT,
	}

	impl TryFrom<i32> for ListpeersPeersChannelsHtlcsDirection {
	    type Error = anyhow::Error;
	    fn try_from(c: i32) -> Result<ListpeersPeersChannelsHtlcsDirection, anyhow::Error> {
	        match c {
	    0 => Ok(ListpeersPeersChannelsHtlcsDirection::IN),
	    1 => Ok(ListpeersPeersChannelsHtlcsDirection::OUT),
	            o => Err(anyhow::anyhow!("Unknown variant {} for enum ListpeersPeersChannelsHtlcsDirection", o)),
	        }
	    }
	}
	/// Status of the HTLC
	#[derive(Copy, Clone, Debug, Deserialize, Serialize)]
	#[serde(rename_all = "lowercase")]
	pub enum ListpeersPeersChannelsHtlcsState {
	    SENT_ADD_HTLC,
	    SENT_ADD_COMMIT,
	    RCVD_ADD_REVOCATION,
	    RCVD_ADD_ACK_COMMIT,
	    SENT_ADD_ACK_REVOCATION,
	    RCVD_REMOVE_HTLC,
	    RCVD_REMOVE_COMMIT,
	    SENT_REMOVE_REVOCATION,
	    SENT_REMOVE_ACK_COMMIT,
	    RCVD_REMOVE_ACK_REVOCATION,
	}

	impl TryFrom<i32> for ListpeersPeersChannelsHtlcsState {
	    type Error = anyhow::Error;
	    fn try_from(c: i32) -> Result<ListpeersPeersChannelsHtlcsState, anyhow::Error> {
	        match c {
	    0 => Ok(ListpeersPeersChannelsHtlcsState::SENT_ADD_HTLC),
	    1 => Ok(ListpeersPeersChannelsHtlcsState::SENT_ADD_COMMIT),
	    2 => Ok(ListpeersPeersChannelsHtlcsState::RCVD_ADD_REVOCATION),
	    3 => Ok(ListpeersPeersChannelsHtlcsState::RCVD_ADD_ACK_COMMIT),
	    4 => Ok(ListpeersPeersChannelsHtlcsState::SENT_ADD_ACK_REVOCATION),
	    5 => Ok(ListpeersPeersChannelsHtlcsState::RCVD_REMOVE_HTLC),
	    6 => Ok(ListpeersPeersChannelsHtlcsState::RCVD_REMOVE_COMMIT),
	    7 => Ok(ListpeersPeersChannelsHtlcsState::SENT_REMOVE_REVOCATION),
	    8 => Ok(ListpeersPeersChannelsHtlcsState::SENT_REMOVE_ACK_COMMIT),
	    9 => Ok(ListpeersPeersChannelsHtlcsState::RCVD_REMOVE_ACK_REVOCATION),
	            o => Err(anyhow::anyhow!("Unknown variant {} for enum ListpeersPeersChannelsHtlcsState", o)),
	        }
	    }
	}
	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct ListpeersPeersChannelsHtlcs {
	    // Path `ListPeers.peers[].channels[].htlcs[].direction`
	    #[serde(rename = "direction")]
	    pub direction: ListpeersPeersChannelsHtlcsDirection,
	    #[serde(alias = "id")]
	    pub id: u64,
	    #[serde(alias = "amount_msat")]
	    pub amount_msat: Amount,
	    #[serde(alias = "expiry")]
	    pub expiry: u32,
	    #[serde(alias = "payment_hash")]
	    pub payment_hash: String,
	    #[serde(alias = "local_trimmed", skip_serializing_if = "Option::is_none")]
	    pub local_trimmed: Option<bool>,
	    #[serde(alias = "status", skip_serializing_if = "Option::is_none")]
	    pub status: Option<String>,
	    // Path `ListPeers.peers[].channels[].htlcs[].state`
	    #[serde(rename = "state")]
	    pub state: ListpeersPeersChannelsHtlcsState,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct ListpeersPeersChannels {
	    // Path `ListPeers.peers[].channels[].state`
	    #[serde(rename = "state")]
	    pub state: ListpeersPeersChannelsState,
	    #[serde(alias = "scratch_txid", skip_serializing_if = "Option::is_none")]
	    pub scratch_txid: Option<String>,
	    #[serde(alias = "owner", skip_serializing_if = "Option::is_none")]
	    pub owner: Option<String>,
	    #[serde(alias = "short_channel_id", skip_serializing_if = "Option::is_none")]
	    pub short_channel_id: Option<String>,
	    #[serde(alias = "channel_id", skip_serializing_if = "Option::is_none")]
	    pub channel_id: Option<String>,
	    #[serde(alias = "funding_txid", skip_serializing_if = "Option::is_none")]
	    pub funding_txid: Option<String>,
	    #[serde(alias = "funding_outnum", skip_serializing_if = "Option::is_none")]
	    pub funding_outnum: Option<u32>,
	    #[serde(alias = "initial_feerate", skip_serializing_if = "Option::is_none")]
	    pub initial_feerate: Option<String>,
	    #[serde(alias = "last_feerate", skip_serializing_if = "Option::is_none")]
	    pub last_feerate: Option<String>,
	    #[serde(alias = "next_feerate", skip_serializing_if = "Option::is_none")]
	    pub next_feerate: Option<String>,
	    #[serde(alias = "next_fee_step", skip_serializing_if = "Option::is_none")]
	    pub next_fee_step: Option<u32>,
	    #[serde(alias = "inflight")]
	    pub inflight: Vec<ListpeersPeersChannelsInflight>,
	    #[serde(alias = "close_to", skip_serializing_if = "Option::is_none")]
	    pub close_to: Option<String>,
	    #[serde(alias = "private", skip_serializing_if = "Option::is_none")]
	    pub private: Option<bool>,
	    // Path `ListPeers.peers[].channels[].opener`
	    #[serde(rename = "opener")]
	    pub opener: ChannelSide,
	    pub closer: Option<ChannelSide>,
	    #[serde(alias = "features")]
	    pub features: Vec<String>,
	    #[serde(alias = "to_us_msat", skip_serializing_if = "Option::is_none")]
	    pub to_us_msat: Option<Amount>,
	    #[serde(alias = "min_to_us_msat", skip_serializing_if = "Option::is_none")]
	    pub min_to_us_msat: Option<Amount>,
	    #[serde(alias = "max_to_us_msat", skip_serializing_if = "Option::is_none")]
	    pub max_to_us_msat: Option<Amount>,
	    #[serde(alias = "total_msat", skip_serializing_if = "Option::is_none")]
	    pub total_msat: Option<Amount>,
	    #[serde(alias = "fee_base_msat", skip_serializing_if = "Option::is_none")]
	    pub fee_base_msat: Option<Amount>,
	    #[serde(alias = "fee_proportional_millionths", skip_serializing_if = "Option::is_none")]
	    pub fee_proportional_millionths: Option<u32>,
	    #[serde(alias = "dust_limit_msat", skip_serializing_if = "Option::is_none")]
	    pub dust_limit_msat: Option<Amount>,
	    #[serde(alias = "max_total_htlc_in_msat", skip_serializing_if = "Option::is_none")]
	    pub max_total_htlc_in_msat: Option<Amount>,
	    #[serde(alias = "their_reserve_msat", skip_serializing_if = "Option::is_none")]
	    pub their_reserve_msat: Option<Amount>,
	    #[serde(alias = "our_reserve_msat", skip_serializing_if = "Option::is_none")]
	    pub our_reserve_msat: Option<Amount>,
	    #[serde(alias = "spendable_msat", skip_serializing_if = "Option::is_none")]
	    pub spendable_msat: Option<Amount>,
	    #[serde(alias = "receivable_msat", skip_serializing_if = "Option::is_none")]
	    pub receivable_msat: Option<Amount>,
	    #[serde(alias = "minimum_htlc_in_msat", skip_serializing_if = "Option::is_none")]
	    pub minimum_htlc_in_msat: Option<Amount>,
	    #[serde(alias = "their_to_self_delay", skip_serializing_if = "Option::is_none")]
	    pub their_to_self_delay: Option<u32>,
	    #[serde(alias = "our_to_self_delay", skip_serializing_if = "Option::is_none")]
	    pub our_to_self_delay: Option<u32>,
	    #[serde(alias = "max_accepted_htlcs", skip_serializing_if = "Option::is_none")]
	    pub max_accepted_htlcs: Option<u32>,
	    #[serde(alias = "state_changes")]
	    pub state_changes: Vec<ListpeersPeersChannelsState_changes>,
	    #[serde(alias = "status")]
	    pub status: Vec<String>,
	    #[serde(alias = "in_payments_offered", skip_serializing_if = "Option::is_none")]
	    pub in_payments_offered: Option<u64>,
	    #[serde(alias = "in_offered_msat", skip_serializing_if = "Option::is_none")]
	    pub in_offered_msat: Option<Amount>,
	    #[serde(alias = "in_payments_fulfilled", skip_serializing_if = "Option::is_none")]
	    pub in_payments_fulfilled: Option<u64>,
	    #[serde(alias = "in_fulfilled_msat", skip_serializing_if = "Option::is_none")]
	    pub in_fulfilled_msat: Option<Amount>,
	    #[serde(alias = "out_payments_offered", skip_serializing_if = "Option::is_none")]
	    pub out_payments_offered: Option<u64>,
	    #[serde(alias = "out_offered_msat", skip_serializing_if = "Option::is_none")]
	    pub out_offered_msat: Option<Amount>,
	    #[serde(alias = "out_payments_fulfilled", skip_serializing_if = "Option::is_none")]
	    pub out_payments_fulfilled: Option<u64>,
	    #[serde(alias = "out_fulfilled_msat", skip_serializing_if = "Option::is_none")]
	    pub out_fulfilled_msat: Option<Amount>,
	    #[serde(alias = "htlcs")]
	    pub htlcs: Vec<ListpeersPeersChannelsHtlcs>,
	    #[serde(alias = "close_to_addr", skip_serializing_if = "Option::is_none")]
	    pub close_to_addr: Option<String>,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct ListpeersPeers {
	    #[serde(alias = "id")]
	    pub id: String,
	    #[serde(alias = "connected")]
	    pub connected: bool,
	    #[serde(alias = "log")]
	    pub log: Vec<ListpeersPeersLog>,
	    #[serde(alias = "channels")]
	    pub channels: Vec<ListpeersPeersChannels>,
	    #[serde(alias = "netaddr")]
	    pub netaddr: Vec<String>,
	    #[serde(alias = "features", skip_serializing_if = "Option::is_none")]
	    pub features: Option<String>,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct ListpeersResponse {
	    #[serde(alias = "peers")]
	    pub peers: Vec<ListpeersPeers>,
	}

	#[derive(Copy, Clone, Debug, Deserialize, Serialize)]
	#[serde(rename_all = "lowercase")]
	pub enum ListfundsOutputsStatus {
	    UNCONFIRMED,
	    CONFIRMED,
	    SPENT,
	}

	impl TryFrom<i32> for ListfundsOutputsStatus {
	    type Error = anyhow::Error;
	    fn try_from(c: i32) -> Result<ListfundsOutputsStatus, anyhow::Error> {
	        match c {
	    0 => Ok(ListfundsOutputsStatus::UNCONFIRMED),
	    1 => Ok(ListfundsOutputsStatus::CONFIRMED),
	    2 => Ok(ListfundsOutputsStatus::SPENT),
	            o => Err(anyhow::anyhow!("Unknown variant {} for enum ListfundsOutputsStatus", o)),
	        }
	    }
	}
	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct ListfundsOutputs {
	    #[serde(alias = "txid")]
	    pub txid: String,
	    #[serde(alias = "output")]
	    pub output: u32,
	    #[serde(alias = "amount_msat")]
	    pub amount_msat: Amount,
	    #[serde(alias = "scriptpubkey")]
	    pub scriptpubkey: String,
	    #[serde(alias = "address", skip_serializing_if = "Option::is_none")]
	    pub address: Option<String>,
	    #[serde(alias = "redeemscript", skip_serializing_if = "Option::is_none")]
	    pub redeemscript: Option<String>,
	    // Path `ListFunds.outputs[].status`
	    #[serde(rename = "status")]
	    pub status: ListfundsOutputsStatus,
	    #[serde(alias = "blockheight", skip_serializing_if = "Option::is_none")]
	    pub blockheight: Option<u32>,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct ListfundsChannels {
	    #[serde(alias = "peer_id")]
	    pub peer_id: String,
	    #[serde(alias = "our_amount_msat")]
	    pub our_amount_msat: Amount,
	    #[serde(alias = "amount_msat")]
	    pub amount_msat: Amount,
	    #[serde(alias = "funding_txid")]
	    pub funding_txid: String,
	    #[serde(alias = "funding_output")]
	    pub funding_output: u32,
	    #[serde(alias = "connected")]
	    pub connected: bool,
	    // Path `ListFunds.channels[].state`
	    #[serde(rename = "state")]
	    pub state: ChannelState,
	    #[serde(alias = "short_channel_id", skip_serializing_if = "Option::is_none")]
	    pub short_channel_id: Option<String>,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct ListfundsResponse {
	    #[serde(alias = "outputs")]
	    pub outputs: Vec<ListfundsOutputs>,
	    #[serde(alias = "channels")]
	    pub channels: Vec<ListfundsChannels>,
	}

	/// status of the payment (could be complete if already sent previously)
	#[derive(Copy, Clone, Debug, Deserialize, Serialize)]
	#[serde(rename_all = "lowercase")]
	pub enum SendpayStatus {
	    PENDING,
	    COMPLETE,
	}

	impl TryFrom<i32> for SendpayStatus {
	    type Error = anyhow::Error;
	    fn try_from(c: i32) -> Result<SendpayStatus, anyhow::Error> {
	        match c {
	    0 => Ok(SendpayStatus::PENDING),
	    1 => Ok(SendpayStatus::COMPLETE),
	            o => Err(anyhow::anyhow!("Unknown variant {} for enum SendpayStatus", o)),
	        }
	    }
	}
	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct SendpayResponse {
	    #[serde(alias = "id")]
	    pub id: u64,
	    #[serde(alias = "groupid", skip_serializing_if = "Option::is_none")]
	    pub groupid: Option<u64>,
	    #[serde(alias = "payment_hash")]
	    pub payment_hash: String,
	    // Path `SendPay.status`
	    #[serde(rename = "status")]
	    pub status: SendpayStatus,
	    #[serde(alias = "amount_msat", skip_serializing_if = "Option::is_none")]
	    pub amount_msat: Option<Amount>,
	    #[serde(alias = "destination", skip_serializing_if = "Option::is_none")]
	    pub destination: Option<String>,
	    #[serde(alias = "created_at")]
	    pub created_at: u64,
	    #[serde(alias = "amount_sent_msat")]
	    pub amount_sent_msat: Amount,
	    #[serde(alias = "label", skip_serializing_if = "Option::is_none")]
	    pub label: Option<String>,
	    #[serde(alias = "partid", skip_serializing_if = "Option::is_none")]
	    pub partid: Option<u64>,
	    #[serde(alias = "bolt11", skip_serializing_if = "Option::is_none")]
	    pub bolt11: Option<String>,
	    #[serde(alias = "bolt12", skip_serializing_if = "Option::is_none")]
	    pub bolt12: Option<String>,
	    #[serde(alias = "payment_preimage", skip_serializing_if = "Option::is_none")]
	    pub payment_preimage: Option<String>,
	    #[serde(alias = "message", skip_serializing_if = "Option::is_none")]
	    pub message: Option<String>,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct ListchannelsChannels {
	    #[serde(alias = "source")]
	    pub source: String,
	    #[serde(alias = "destination")]
	    pub destination: String,
	    #[serde(alias = "short_channel_id")]
	    pub short_channel_id: String,
	    #[serde(alias = "public")]
	    pub public: bool,
	    #[serde(alias = "amount_msat")]
	    pub amount_msat: Amount,
	    #[serde(alias = "message_flags")]
	    pub message_flags: u8,
	    #[serde(alias = "channel_flags")]
	    pub channel_flags: u8,
	    #[serde(alias = "active")]
	    pub active: bool,
	    #[serde(alias = "last_update")]
	    pub last_update: u32,
	    #[serde(alias = "base_fee_millisatoshi")]
	    pub base_fee_millisatoshi: u32,
	    #[serde(alias = "fee_per_millionth")]
	    pub fee_per_millionth: u32,
	    #[serde(alias = "delay")]
	    pub delay: u32,
	    #[serde(alias = "htlc_minimum_msat")]
	    pub htlc_minimum_msat: Amount,
	    #[serde(alias = "htlc_maximum_msat", skip_serializing_if = "Option::is_none")]
	    pub htlc_maximum_msat: Option<Amount>,
	    #[serde(alias = "features")]
	    pub features: String,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct ListchannelsResponse {
	    #[serde(alias = "channels")]
	    pub channels: Vec<ListchannelsChannels>,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct AddgossipResponse {
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct AutocleaninvoiceResponse {
	    #[serde(alias = "enabled")]
	    pub enabled: bool,
	    #[serde(alias = "expired_by", skip_serializing_if = "Option::is_none")]
	    pub expired_by: Option<u64>,
	    #[serde(alias = "cycle_seconds", skip_serializing_if = "Option::is_none")]
	    pub cycle_seconds: Option<u64>,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct CheckmessageResponse {
	    #[serde(alias = "verified")]
	    pub verified: bool,
	    #[serde(alias = "pubkey", skip_serializing_if = "Option::is_none")]
	    pub pubkey: Option<String>,
	}

	/// Whether we successfully negotiated a mutual close, closed without them, or discarded not-yet-opened channel
	#[derive(Copy, Clone, Debug, Deserialize, Serialize)]
	#[serde(rename_all = "lowercase")]
	pub enum CloseType {
	    MUTUAL,
	    UNILATERAL,
	    UNOPENED,
	}

	impl TryFrom<i32> for CloseType {
	    type Error = anyhow::Error;
	    fn try_from(c: i32) -> Result<CloseType, anyhow::Error> {
	        match c {
	    0 => Ok(CloseType::MUTUAL),
	    1 => Ok(CloseType::UNILATERAL),
	    2 => Ok(CloseType::UNOPENED),
	            o => Err(anyhow::anyhow!("Unknown variant {} for enum CloseType", o)),
	        }
	    }
	}
	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct CloseResponse {
	    // Path `Close.type`
	    #[serde(rename = "type")]
	    pub item_type: CloseType,
	    #[serde(alias = "tx", skip_serializing_if = "Option::is_none")]
	    pub tx: Option<String>,
	    #[serde(alias = "txid", skip_serializing_if = "Option::is_none")]
	    pub txid: Option<String>,
	}

	/// Whether they initiated connection or we did
	#[derive(Copy, Clone, Debug, Deserialize, Serialize)]
	#[serde(rename_all = "lowercase")]
	pub enum ConnectDirection {
	    IN,
	    OUT,
	}

	impl TryFrom<i32> for ConnectDirection {
	    type Error = anyhow::Error;
	    fn try_from(c: i32) -> Result<ConnectDirection, anyhow::Error> {
	        match c {
	    0 => Ok(ConnectDirection::IN),
	    1 => Ok(ConnectDirection::OUT),
	            o => Err(anyhow::anyhow!("Unknown variant {} for enum ConnectDirection", o)),
	        }
	    }
	}
	/// Type of connection (*torv2*/*torv3* only if **direction** is *out*)
	#[derive(Copy, Clone, Debug, Deserialize, Serialize)]
	#[serde(rename_all = "lowercase")]
	pub enum ConnectAddressType {
	    LOCAL_SOCKET,
	    IPV4,
	    IPV6,
	    TORV2,
	    TORV3,
	}

	impl TryFrom<i32> for ConnectAddressType {
	    type Error = anyhow::Error;
	    fn try_from(c: i32) -> Result<ConnectAddressType, anyhow::Error> {
	        match c {
	    0 => Ok(ConnectAddressType::LOCAL_SOCKET),
	    1 => Ok(ConnectAddressType::IPV4),
	    2 => Ok(ConnectAddressType::IPV6),
	    3 => Ok(ConnectAddressType::TORV2),
	    4 => Ok(ConnectAddressType::TORV3),
	            o => Err(anyhow::anyhow!("Unknown variant {} for enum ConnectAddressType", o)),
	        }
	    }
	}
	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct ConnectAddress {
	    // Path `Connect.address.type`
	    #[serde(rename = "type")]
	    pub item_type: ConnectAddressType,
	    #[serde(alias = "socket", skip_serializing_if = "Option::is_none")]
	    pub socket: Option<String>,
	    #[serde(alias = "address", skip_serializing_if = "Option::is_none")]
	    pub address: Option<String>,
	    #[serde(alias = "port", skip_serializing_if = "Option::is_none")]
	    pub port: Option<u16>,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct ConnectResponse {
	    #[serde(alias = "id")]
	    pub id: String,
	    #[serde(alias = "features")]
	    pub features: String,
	    // Path `Connect.direction`
	    #[serde(rename = "direction")]
	    pub direction: ConnectDirection,
	}

	/// Whether it has been paid, or can no longer be paid
	#[derive(Copy, Clone, Debug, Deserialize, Serialize)]
	#[serde(rename_all = "lowercase")]
	pub enum CreateinvoiceStatus {
	    PAID,
	    EXPIRED,
	    UNPAID,
	}

	impl TryFrom<i32> for CreateinvoiceStatus {
	    type Error = anyhow::Error;
	    fn try_from(c: i32) -> Result<CreateinvoiceStatus, anyhow::Error> {
	        match c {
	    0 => Ok(CreateinvoiceStatus::PAID),
	    1 => Ok(CreateinvoiceStatus::EXPIRED),
	    2 => Ok(CreateinvoiceStatus::UNPAID),
	            o => Err(anyhow::anyhow!("Unknown variant {} for enum CreateinvoiceStatus", o)),
	        }
	    }
	}
	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct CreateinvoiceResponse {
	    #[serde(alias = "label")]
	    pub label: String,
	    #[serde(alias = "bolt11", skip_serializing_if = "Option::is_none")]
	    pub bolt11: Option<String>,
	    #[serde(alias = "bolt12", skip_serializing_if = "Option::is_none")]
	    pub bolt12: Option<String>,
	    #[serde(alias = "payment_hash")]
	    pub payment_hash: String,
	    #[serde(alias = "amount_msat", skip_serializing_if = "Option::is_none")]
	    pub amount_msat: Option<Amount>,
	    // Path `CreateInvoice.status`
	    #[serde(rename = "status")]
	    pub status: CreateinvoiceStatus,
	    #[serde(alias = "description")]
	    pub description: String,
	    #[serde(alias = "expires_at")]
	    pub expires_at: u64,
	    #[serde(alias = "pay_index", skip_serializing_if = "Option::is_none")]
	    pub pay_index: Option<u64>,
	    #[serde(alias = "amount_received_msat", skip_serializing_if = "Option::is_none")]
	    pub amount_received_msat: Option<Amount>,
	    #[serde(alias = "paid_at", skip_serializing_if = "Option::is_none")]
	    pub paid_at: Option<u64>,
	    #[serde(alias = "payment_preimage", skip_serializing_if = "Option::is_none")]
	    pub payment_preimage: Option<String>,
	    #[serde(alias = "local_offer_id", skip_serializing_if = "Option::is_none")]
	    pub local_offer_id: Option<String>,
	    #[serde(alias = "payer_note", skip_serializing_if = "Option::is_none")]
	    pub payer_note: Option<String>,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct DatastoreResponse {
	    #[serde(alias = "key")]
	    pub key: Vec<String>,
	    #[serde(alias = "generation", skip_serializing_if = "Option::is_none")]
	    pub generation: Option<u64>,
	    #[serde(alias = "hex", skip_serializing_if = "Option::is_none")]
	    pub hex: Option<String>,
	    #[serde(alias = "string", skip_serializing_if = "Option::is_none")]
	    pub string: Option<String>,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct CreateonionResponse {
	    #[serde(alias = "onion")]
	    pub onion: String,
	    #[serde(alias = "shared_secrets")]
	    pub shared_secrets: Vec<String>,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct DeldatastoreResponse {
	    #[serde(alias = "key")]
	    pub key: Vec<String>,
	    #[serde(alias = "generation", skip_serializing_if = "Option::is_none")]
	    pub generation: Option<u64>,
	    #[serde(alias = "hex", skip_serializing_if = "Option::is_none")]
	    pub hex: Option<String>,
	    #[serde(alias = "string", skip_serializing_if = "Option::is_none")]
	    pub string: Option<String>,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct DelexpiredinvoiceResponse {
	}

	/// State of invoice
	#[derive(Copy, Clone, Debug, Deserialize, Serialize)]
	#[serde(rename_all = "lowercase")]
	pub enum DelinvoiceStatus {
	    PAID,
	    EXPIRED,
	    UNPAID,
	}

	impl TryFrom<i32> for DelinvoiceStatus {
	    type Error = anyhow::Error;
	    fn try_from(c: i32) -> Result<DelinvoiceStatus, anyhow::Error> {
	        match c {
	    0 => Ok(DelinvoiceStatus::PAID),
	    1 => Ok(DelinvoiceStatus::EXPIRED),
	    2 => Ok(DelinvoiceStatus::UNPAID),
	            o => Err(anyhow::anyhow!("Unknown variant {} for enum DelinvoiceStatus", o)),
	        }
	    }
	}
	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct DelinvoiceResponse {
	    #[serde(alias = "label")]
	    pub label: String,
	    #[serde(alias = "bolt11", skip_serializing_if = "Option::is_none")]
	    pub bolt11: Option<String>,
	    #[serde(alias = "bolt12", skip_serializing_if = "Option::is_none")]
	    pub bolt12: Option<String>,
	    #[serde(alias = "amount_msat", skip_serializing_if = "Option::is_none")]
	    pub amount_msat: Option<Amount>,
	    #[serde(alias = "description", skip_serializing_if = "Option::is_none")]
	    pub description: Option<String>,
	    #[serde(alias = "payment_hash")]
	    pub payment_hash: String,
	    // Path `DelInvoice.status`
	    #[serde(rename = "status")]
	    pub status: DelinvoiceStatus,
	    #[serde(alias = "expires_at")]
	    pub expires_at: u64,
	    #[serde(alias = "local_offer_id", skip_serializing_if = "Option::is_none")]
	    pub local_offer_id: Option<String>,
	    #[serde(alias = "payer_note", skip_serializing_if = "Option::is_none")]
	    pub payer_note: Option<String>,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct InvoiceResponse {
	    #[serde(alias = "bolt11")]
	    pub bolt11: String,
	    #[serde(alias = "payment_hash")]
	    pub payment_hash: String,
	    #[serde(alias = "payment_secret")]
	    pub payment_secret: String,
	    #[serde(alias = "expires_at")]
	    pub expires_at: u64,
	    #[serde(alias = "warning_capacity", skip_serializing_if = "Option::is_none")]
	    pub warning_capacity: Option<String>,
	    #[serde(alias = "warning_offline", skip_serializing_if = "Option::is_none")]
	    pub warning_offline: Option<String>,
	    #[serde(alias = "warning_deadends", skip_serializing_if = "Option::is_none")]
	    pub warning_deadends: Option<String>,
	    #[serde(alias = "warning_private_unused", skip_serializing_if = "Option::is_none")]
	    pub warning_private_unused: Option<String>,
	    #[serde(alias = "warning_mpp", skip_serializing_if = "Option::is_none")]
	    pub warning_mpp: Option<String>,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct ListdatastoreDatastore {
	    #[serde(alias = "key")]
	    pub key: Vec<String>,
	    #[serde(alias = "generation", skip_serializing_if = "Option::is_none")]
	    pub generation: Option<u64>,
	    #[serde(alias = "hex", skip_serializing_if = "Option::is_none")]
	    pub hex: Option<String>,
	    #[serde(alias = "string", skip_serializing_if = "Option::is_none")]
	    pub string: Option<String>,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct ListdatastoreResponse {
	    #[serde(alias = "datastore")]
	    pub datastore: Vec<ListdatastoreDatastore>,
	}

	/// Whether it's paid, unpaid or unpayable
	#[derive(Copy, Clone, Debug, Deserialize, Serialize)]
	#[serde(rename_all = "lowercase")]
	pub enum ListinvoicesInvoicesStatus {
	    UNPAID,
	    PAID,
	    EXPIRED,
	}

	impl TryFrom<i32> for ListinvoicesInvoicesStatus {
	    type Error = anyhow::Error;
	    fn try_from(c: i32) -> Result<ListinvoicesInvoicesStatus, anyhow::Error> {
	        match c {
	    0 => Ok(ListinvoicesInvoicesStatus::UNPAID),
	    1 => Ok(ListinvoicesInvoicesStatus::PAID),
	    2 => Ok(ListinvoicesInvoicesStatus::EXPIRED),
	            o => Err(anyhow::anyhow!("Unknown variant {} for enum ListinvoicesInvoicesStatus", o)),
	        }
	    }
	}
	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct ListinvoicesInvoices {
	    #[serde(alias = "label")]
	    pub label: String,
	    #[serde(alias = "description")]
	    pub description: String,
	    #[serde(alias = "payment_hash")]
	    pub payment_hash: String,
	    // Path `ListInvoices.invoices[].status`
	    #[serde(rename = "status")]
	    pub status: ListinvoicesInvoicesStatus,
	    #[serde(alias = "expires_at")]
	    pub expires_at: u64,
	    #[serde(alias = "amount_msat", skip_serializing_if = "Option::is_none")]
	    pub amount_msat: Option<Amount>,
	    #[serde(alias = "bolt11", skip_serializing_if = "Option::is_none")]
	    pub bolt11: Option<String>,
	    #[serde(alias = "bolt12", skip_serializing_if = "Option::is_none")]
	    pub bolt12: Option<String>,
	    #[serde(alias = "local_offer_id", skip_serializing_if = "Option::is_none")]
	    pub local_offer_id: Option<String>,
	    #[serde(alias = "payer_note", skip_serializing_if = "Option::is_none")]
	    pub payer_note: Option<String>,
	    #[serde(alias = "pay_index", skip_serializing_if = "Option::is_none")]
	    pub pay_index: Option<u64>,
	    #[serde(alias = "amount_received_msat", skip_serializing_if = "Option::is_none")]
	    pub amount_received_msat: Option<Amount>,
	    #[serde(alias = "paid_at", skip_serializing_if = "Option::is_none")]
	    pub paid_at: Option<u64>,
	    #[serde(alias = "payment_preimage", skip_serializing_if = "Option::is_none")]
	    pub payment_preimage: Option<String>,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct ListinvoicesResponse {
	    #[serde(alias = "invoices")]
	    pub invoices: Vec<ListinvoicesInvoices>,
	}

	/// status of the payment (could be complete if already sent previously)
	#[derive(Copy, Clone, Debug, Deserialize, Serialize)]
	#[serde(rename_all = "lowercase")]
	pub enum SendonionStatus {
	    PENDING,
	    COMPLETE,
	}

	impl TryFrom<i32> for SendonionStatus {
	    type Error = anyhow::Error;
	    fn try_from(c: i32) -> Result<SendonionStatus, anyhow::Error> {
	        match c {
	    0 => Ok(SendonionStatus::PENDING),
	    1 => Ok(SendonionStatus::COMPLETE),
	            o => Err(anyhow::anyhow!("Unknown variant {} for enum SendonionStatus", o)),
	        }
	    }
	}
	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct SendonionResponse {
	    #[serde(alias = "id")]
	    pub id: u64,
	    #[serde(alias = "payment_hash")]
	    pub payment_hash: String,
	    // Path `SendOnion.status`
	    #[serde(rename = "status")]
	    pub status: SendonionStatus,
	    #[serde(alias = "amount_msat", skip_serializing_if = "Option::is_none")]
	    pub amount_msat: Option<Amount>,
	    #[serde(alias = "destination", skip_serializing_if = "Option::is_none")]
	    pub destination: Option<String>,
	    #[serde(alias = "created_at")]
	    pub created_at: u64,
	    #[serde(alias = "amount_sent_msat")]
	    pub amount_sent_msat: Amount,
	    #[serde(alias = "label", skip_serializing_if = "Option::is_none")]
	    pub label: Option<String>,
	    #[serde(alias = "bolt11", skip_serializing_if = "Option::is_none")]
	    pub bolt11: Option<String>,
	    #[serde(alias = "bolt12", skip_serializing_if = "Option::is_none")]
	    pub bolt12: Option<String>,
	    #[serde(alias = "payment_preimage", skip_serializing_if = "Option::is_none")]
	    pub payment_preimage: Option<String>,
	    #[serde(alias = "message", skip_serializing_if = "Option::is_none")]
	    pub message: Option<String>,
	}

	/// status of the payment
	#[derive(Copy, Clone, Debug, Deserialize, Serialize)]
	#[serde(rename_all = "lowercase")]
	pub enum ListsendpaysPaymentsStatus {
	    PENDING,
	    FAILED,
	    COMPLETE,
	}

	impl TryFrom<i32> for ListsendpaysPaymentsStatus {
	    type Error = anyhow::Error;
	    fn try_from(c: i32) -> Result<ListsendpaysPaymentsStatus, anyhow::Error> {
	        match c {
	    0 => Ok(ListsendpaysPaymentsStatus::PENDING),
	    1 => Ok(ListsendpaysPaymentsStatus::FAILED),
	    2 => Ok(ListsendpaysPaymentsStatus::COMPLETE),
	            o => Err(anyhow::anyhow!("Unknown variant {} for enum ListsendpaysPaymentsStatus", o)),
	        }
	    }
	}
	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct ListsendpaysPayments {
	    #[serde(alias = "id")]
	    pub id: u64,
	    #[serde(alias = "groupid", skip_serializing_if = "Option::is_none")]
	    pub groupid: Option<u64>,
	    #[serde(alias = "payment_hash")]
	    pub payment_hash: String,
	    // Path `ListSendPays.payments[].status`
	    #[serde(rename = "status")]
	    pub status: ListsendpaysPaymentsStatus,
	    #[serde(alias = "amount_msat", skip_serializing_if = "Option::is_none")]
	    pub amount_msat: Option<Amount>,
	    #[serde(alias = "destination", skip_serializing_if = "Option::is_none")]
	    pub destination: Option<String>,
	    #[serde(alias = "created_at")]
	    pub created_at: u64,
	    #[serde(alias = "amount_sent_msat")]
	    pub amount_sent_msat: Amount,
	    #[serde(alias = "label", skip_serializing_if = "Option::is_none")]
	    pub label: Option<String>,
	    #[serde(alias = "bolt11", skip_serializing_if = "Option::is_none")]
	    pub bolt11: Option<String>,
	    #[serde(alias = "bolt12", skip_serializing_if = "Option::is_none")]
	    pub bolt12: Option<String>,
	    #[serde(alias = "payment_preimage", skip_serializing_if = "Option::is_none")]
	    pub payment_preimage: Option<String>,
	    #[serde(alias = "erroronion", skip_serializing_if = "Option::is_none")]
	    pub erroronion: Option<String>,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct ListsendpaysResponse {
	    #[serde(alias = "payments")]
	    pub payments: Vec<ListsendpaysPayments>,
	}

	/// the purpose of this input (*EXPERIMENTAL_FEATURES* only)
	#[derive(Copy, Clone, Debug, Deserialize, Serialize)]
	#[serde(rename_all = "lowercase")]
	pub enum ListtransactionsTransactionsInputsType {
	    THEIRS,
	    DEPOSIT,
	    WITHDRAW,
	    CHANNEL_FUNDING,
	    CHANNEL_MUTUAL_CLOSE,
	    CHANNEL_UNILATERAL_CLOSE,
	    CHANNEL_SWEEP,
	    CHANNEL_HTLC_SUCCESS,
	    CHANNEL_HTLC_TIMEOUT,
	    CHANNEL_PENALTY,
	    CHANNEL_UNILATERAL_CHEAT,
	}

	impl TryFrom<i32> for ListtransactionsTransactionsInputsType {
	    type Error = anyhow::Error;
	    fn try_from(c: i32) -> Result<ListtransactionsTransactionsInputsType, anyhow::Error> {
	        match c {
	    0 => Ok(ListtransactionsTransactionsInputsType::THEIRS),
	    1 => Ok(ListtransactionsTransactionsInputsType::DEPOSIT),
	    2 => Ok(ListtransactionsTransactionsInputsType::WITHDRAW),
	    3 => Ok(ListtransactionsTransactionsInputsType::CHANNEL_FUNDING),
	    4 => Ok(ListtransactionsTransactionsInputsType::CHANNEL_MUTUAL_CLOSE),
	    5 => Ok(ListtransactionsTransactionsInputsType::CHANNEL_UNILATERAL_CLOSE),
	    6 => Ok(ListtransactionsTransactionsInputsType::CHANNEL_SWEEP),
	    7 => Ok(ListtransactionsTransactionsInputsType::CHANNEL_HTLC_SUCCESS),
	    8 => Ok(ListtransactionsTransactionsInputsType::CHANNEL_HTLC_TIMEOUT),
	    9 => Ok(ListtransactionsTransactionsInputsType::CHANNEL_PENALTY),
	    10 => Ok(ListtransactionsTransactionsInputsType::CHANNEL_UNILATERAL_CHEAT),
	            o => Err(anyhow::anyhow!("Unknown variant {} for enum ListtransactionsTransactionsInputsType", o)),
	        }
	    }
	}
	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct ListtransactionsTransactionsInputs {
	    #[serde(alias = "txid")]
	    pub txid: String,
	    #[serde(alias = "index")]
	    pub index: u32,
	    #[serde(alias = "sequence")]
	    pub sequence: u32,
	    pub item_type: Option<ListtransactionsTransactionsInputsType>,
	    #[serde(alias = "channel", skip_serializing_if = "Option::is_none")]
	    pub channel: Option<String>,
	}

	/// the purpose of this output (*EXPERIMENTAL_FEATURES* only)
	#[derive(Copy, Clone, Debug, Deserialize, Serialize)]
	#[serde(rename_all = "lowercase")]
	pub enum ListtransactionsTransactionsOutputsType {
	    THEIRS,
	    DEPOSIT,
	    WITHDRAW,
	    CHANNEL_FUNDING,
	    CHANNEL_MUTUAL_CLOSE,
	    CHANNEL_UNILATERAL_CLOSE,
	    CHANNEL_SWEEP,
	    CHANNEL_HTLC_SUCCESS,
	    CHANNEL_HTLC_TIMEOUT,
	    CHANNEL_PENALTY,
	    CHANNEL_UNILATERAL_CHEAT,
	}

	impl TryFrom<i32> for ListtransactionsTransactionsOutputsType {
	    type Error = anyhow::Error;
	    fn try_from(c: i32) -> Result<ListtransactionsTransactionsOutputsType, anyhow::Error> {
	        match c {
	    0 => Ok(ListtransactionsTransactionsOutputsType::THEIRS),
	    1 => Ok(ListtransactionsTransactionsOutputsType::DEPOSIT),
	    2 => Ok(ListtransactionsTransactionsOutputsType::WITHDRAW),
	    3 => Ok(ListtransactionsTransactionsOutputsType::CHANNEL_FUNDING),
	    4 => Ok(ListtransactionsTransactionsOutputsType::CHANNEL_MUTUAL_CLOSE),
	    5 => Ok(ListtransactionsTransactionsOutputsType::CHANNEL_UNILATERAL_CLOSE),
	    6 => Ok(ListtransactionsTransactionsOutputsType::CHANNEL_SWEEP),
	    7 => Ok(ListtransactionsTransactionsOutputsType::CHANNEL_HTLC_SUCCESS),
	    8 => Ok(ListtransactionsTransactionsOutputsType::CHANNEL_HTLC_TIMEOUT),
	    9 => Ok(ListtransactionsTransactionsOutputsType::CHANNEL_PENALTY),
	    10 => Ok(ListtransactionsTransactionsOutputsType::CHANNEL_UNILATERAL_CHEAT),
	            o => Err(anyhow::anyhow!("Unknown variant {} for enum ListtransactionsTransactionsOutputsType", o)),
	        }
	    }
	}
	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct ListtransactionsTransactionsOutputs {
	    #[serde(alias = "index")]
	    pub index: u32,
	    #[serde(alias = "msat")]
	    pub msat: Amount,
	    #[serde(alias = "scriptPubKey")]
	    pub script_pub_key: String,
	    pub item_type: Option<ListtransactionsTransactionsOutputsType>,
	    #[serde(alias = "channel", skip_serializing_if = "Option::is_none")]
	    pub channel: Option<String>,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct ListtransactionsTransactions {
	    #[serde(alias = "hash")]
	    pub hash: String,
	    #[serde(alias = "rawtx")]
	    pub rawtx: String,
	    #[serde(alias = "blockheight")]
	    pub blockheight: u32,
	    #[serde(alias = "txindex")]
	    pub txindex: u32,
	    #[serde(alias = "channel", skip_serializing_if = "Option::is_none")]
	    pub channel: Option<String>,
	    #[serde(alias = "locktime")]
	    pub locktime: u32,
	    #[serde(alias = "version")]
	    pub version: u32,
	    #[serde(alias = "inputs")]
	    pub inputs: Vec<ListtransactionsTransactionsInputs>,
	    #[serde(alias = "outputs")]
	    pub outputs: Vec<ListtransactionsTransactionsOutputs>,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct ListtransactionsResponse {
	    #[serde(alias = "transactions")]
	    pub transactions: Vec<ListtransactionsTransactions>,
	}

	/// status of payment
	#[derive(Copy, Clone, Debug, Deserialize, Serialize)]
	#[serde(rename_all = "lowercase")]
	pub enum PayStatus {
	    COMPLETE,
	    PENDING,
	    FAILED,
	}

	impl TryFrom<i32> for PayStatus {
	    type Error = anyhow::Error;
	    fn try_from(c: i32) -> Result<PayStatus, anyhow::Error> {
	        match c {
	    0 => Ok(PayStatus::COMPLETE),
	    1 => Ok(PayStatus::PENDING),
	    2 => Ok(PayStatus::FAILED),
	            o => Err(anyhow::anyhow!("Unknown variant {} for enum PayStatus", o)),
	        }
	    }
	}
	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct PayResponse {
	    #[serde(alias = "payment_preimage")]
	    pub payment_preimage: String,
	    #[serde(alias = "destination", skip_serializing_if = "Option::is_none")]
	    pub destination: Option<String>,
	    #[serde(alias = "payment_hash")]
	    pub payment_hash: String,
	    #[serde(alias = "created_at")]
	    pub created_at: i64,
	    #[serde(alias = "parts")]
	    pub parts: u32,
	    #[serde(alias = "amount_msat")]
	    pub amount_msat: Amount,
	    #[serde(alias = "amount_sent_msat")]
	    pub amount_sent_msat: Amount,
	    #[serde(alias = "warning_partial_completion", skip_serializing_if = "Option::is_none")]
	    pub warning_partial_completion: Option<String>,
	    // Path `Pay.status`
	    #[serde(rename = "status")]
	    pub status: PayStatus,
	}

	/// Type of connection
	#[derive(Copy, Clone, Debug, Deserialize, Serialize)]
	#[serde(rename_all = "lowercase")]
	pub enum ListnodesNodesAddressesType {
	    DNS,
	    IPV4,
	    IPV6,
	    TORV2,
	    TORV3,
	    WEBSOCKET,
	}

	impl TryFrom<i32> for ListnodesNodesAddressesType {
	    type Error = anyhow::Error;
	    fn try_from(c: i32) -> Result<ListnodesNodesAddressesType, anyhow::Error> {
	        match c {
	    0 => Ok(ListnodesNodesAddressesType::DNS),
	    1 => Ok(ListnodesNodesAddressesType::IPV4),
	    2 => Ok(ListnodesNodesAddressesType::IPV6),
	    3 => Ok(ListnodesNodesAddressesType::TORV2),
	    4 => Ok(ListnodesNodesAddressesType::TORV3),
	    5 => Ok(ListnodesNodesAddressesType::WEBSOCKET),
	            o => Err(anyhow::anyhow!("Unknown variant {} for enum ListnodesNodesAddressesType", o)),
	        }
	    }
	}
	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct ListnodesNodesAddresses {
	    // Path `ListNodes.nodes[].addresses[].type`
	    #[serde(rename = "type")]
	    pub item_type: ListnodesNodesAddressesType,
	    #[serde(alias = "port")]
	    pub port: u16,
	    #[serde(alias = "address", skip_serializing_if = "Option::is_none")]
	    pub address: Option<String>,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct ListnodesNodes {
	    #[serde(alias = "nodeid")]
	    pub nodeid: String,
	    #[serde(alias = "last_timestamp", skip_serializing_if = "Option::is_none")]
	    pub last_timestamp: Option<u32>,
	    #[serde(alias = "alias", skip_serializing_if = "Option::is_none")]
	    pub alias: Option<String>,
	    #[serde(alias = "color", skip_serializing_if = "Option::is_none")]
	    pub color: Option<String>,
	    #[serde(alias = "features", skip_serializing_if = "Option::is_none")]
	    pub features: Option<String>,
	    #[serde(alias = "addresses")]
	    pub addresses: Vec<ListnodesNodesAddresses>,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct ListnodesResponse {
	    #[serde(alias = "nodes")]
	    pub nodes: Vec<ListnodesNodes>,
	}

	/// Whether it's paid or expired
	#[derive(Copy, Clone, Debug, Deserialize, Serialize)]
	#[serde(rename_all = "lowercase")]
	pub enum WaitanyinvoiceStatus {
	    PAID,
	    EXPIRED,
	}

	impl TryFrom<i32> for WaitanyinvoiceStatus {
	    type Error = anyhow::Error;
	    fn try_from(c: i32) -> Result<WaitanyinvoiceStatus, anyhow::Error> {
	        match c {
	    0 => Ok(WaitanyinvoiceStatus::PAID),
	    1 => Ok(WaitanyinvoiceStatus::EXPIRED),
	            o => Err(anyhow::anyhow!("Unknown variant {} for enum WaitanyinvoiceStatus", o)),
	        }
	    }
	}
	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct WaitanyinvoiceResponse {
	    #[serde(alias = "label")]
	    pub label: String,
	    #[serde(alias = "description")]
	    pub description: String,
	    #[serde(alias = "payment_hash")]
	    pub payment_hash: String,
	    // Path `WaitAnyInvoice.status`
	    #[serde(rename = "status")]
	    pub status: WaitanyinvoiceStatus,
	    #[serde(alias = "expires_at")]
	    pub expires_at: u64,
	    #[serde(alias = "amount_msat", skip_serializing_if = "Option::is_none")]
	    pub amount_msat: Option<Amount>,
	    #[serde(alias = "bolt11", skip_serializing_if = "Option::is_none")]
	    pub bolt11: Option<String>,
	    #[serde(alias = "bolt12", skip_serializing_if = "Option::is_none")]
	    pub bolt12: Option<String>,
	    #[serde(alias = "pay_index", skip_serializing_if = "Option::is_none")]
	    pub pay_index: Option<u64>,
	    #[serde(alias = "amount_received_msat", skip_serializing_if = "Option::is_none")]
	    pub amount_received_msat: Option<Amount>,
	    #[serde(alias = "paid_at", skip_serializing_if = "Option::is_none")]
	    pub paid_at: Option<u64>,
	    #[serde(alias = "payment_preimage", skip_serializing_if = "Option::is_none")]
	    pub payment_preimage: Option<String>,
	}

	/// Whether it's paid or expired
	#[derive(Copy, Clone, Debug, Deserialize, Serialize)]
	#[serde(rename_all = "lowercase")]
	pub enum WaitinvoiceStatus {
	    PAID,
	    EXPIRED,
	}

	impl TryFrom<i32> for WaitinvoiceStatus {
	    type Error = anyhow::Error;
	    fn try_from(c: i32) -> Result<WaitinvoiceStatus, anyhow::Error> {
	        match c {
	    0 => Ok(WaitinvoiceStatus::PAID),
	    1 => Ok(WaitinvoiceStatus::EXPIRED),
	            o => Err(anyhow::anyhow!("Unknown variant {} for enum WaitinvoiceStatus", o)),
	        }
	    }
	}
	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct WaitinvoiceResponse {
	    #[serde(alias = "label")]
	    pub label: String,
	    #[serde(alias = "description")]
	    pub description: String,
	    #[serde(alias = "payment_hash")]
	    pub payment_hash: String,
	    // Path `WaitInvoice.status`
	    #[serde(rename = "status")]
	    pub status: WaitinvoiceStatus,
	    #[serde(alias = "expires_at")]
	    pub expires_at: u64,
	    #[serde(alias = "amount_msat", skip_serializing_if = "Option::is_none")]
	    pub amount_msat: Option<Amount>,
	    #[serde(alias = "bolt11", skip_serializing_if = "Option::is_none")]
	    pub bolt11: Option<String>,
	    #[serde(alias = "bolt12", skip_serializing_if = "Option::is_none")]
	    pub bolt12: Option<String>,
	    #[serde(alias = "pay_index", skip_serializing_if = "Option::is_none")]
	    pub pay_index: Option<u64>,
	    #[serde(alias = "amount_received_msat", skip_serializing_if = "Option::is_none")]
	    pub amount_received_msat: Option<Amount>,
	    #[serde(alias = "paid_at", skip_serializing_if = "Option::is_none")]
	    pub paid_at: Option<u64>,
	    #[serde(alias = "payment_preimage", skip_serializing_if = "Option::is_none")]
	    pub payment_preimage: Option<String>,
	}

	/// status of the payment
	#[derive(Copy, Clone, Debug, Deserialize, Serialize)]
	#[serde(rename_all = "lowercase")]
	pub enum WaitsendpayStatus {
	    COMPLETE,
	}

	impl TryFrom<i32> for WaitsendpayStatus {
	    type Error = anyhow::Error;
	    fn try_from(c: i32) -> Result<WaitsendpayStatus, anyhow::Error> {
	        match c {
	    0 => Ok(WaitsendpayStatus::COMPLETE),
	            o => Err(anyhow::anyhow!("Unknown variant {} for enum WaitsendpayStatus", o)),
	        }
	    }
	}
	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct WaitsendpayResponse {
	    #[serde(alias = "id")]
	    pub id: u64,
	    #[serde(alias = "groupid", skip_serializing_if = "Option::is_none")]
	    pub groupid: Option<u64>,
	    #[serde(alias = "payment_hash")]
	    pub payment_hash: String,
	    // Path `WaitSendPay.status`
	    #[serde(rename = "status")]
	    pub status: WaitsendpayStatus,
	    #[serde(alias = "amount_msat", skip_serializing_if = "Option::is_none")]
	    pub amount_msat: Option<Amount>,
	    #[serde(alias = "destination", skip_serializing_if = "Option::is_none")]
	    pub destination: Option<String>,
	    #[serde(alias = "created_at")]
	    pub created_at: u64,
	    #[serde(alias = "amount_sent_msat")]
	    pub amount_sent_msat: Amount,
	    #[serde(alias = "label", skip_serializing_if = "Option::is_none")]
	    pub label: Option<String>,
	    #[serde(alias = "partid", skip_serializing_if = "Option::is_none")]
	    pub partid: Option<u64>,
	    #[serde(alias = "bolt11", skip_serializing_if = "Option::is_none")]
	    pub bolt11: Option<String>,
	    #[serde(alias = "bolt12", skip_serializing_if = "Option::is_none")]
	    pub bolt12: Option<String>,
	    #[serde(alias = "payment_preimage", skip_serializing_if = "Option::is_none")]
	    pub payment_preimage: Option<String>,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct NewaddrResponse {
	    #[serde(alias = "bech32", skip_serializing_if = "Option::is_none")]
	    pub bech32: Option<String>,
	    #[serde(alias = "p2sh-segwit", skip_serializing_if = "Option::is_none")]
	    pub p2sh_segwit: Option<String>,
	}

	#[derive(Clone, Debug, Deserialize, Serialize)]
	pub struct WithdrawResponse {
	    #[serde(alias = "tx")]
	    pub tx: String,
	    #[serde(alias = "txid")]
	    pub txid: String,
	    #[serde(alias = "psbt")]
	    pub psbt: String,
	}

}

